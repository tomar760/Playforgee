// scripts/game.js

import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js";
import {
  getAuth,
  onAuthStateChanged,
  signOut
} from "https://www.gstatic.com/firebasejs/9.6.10/firebase-auth.js";
import {
  getDatabase,
  ref,
  get,
  set,
  push,
  onValue,
  update
} from "https://www.gstatic.com/firebasejs/9.6.10/firebase-database.js";

import { firebaseConfig } from "../firebase-config.js";

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getDatabase(app);

let currentUser;
let currentRound = 0;
let timer = 25;
let selectedColor = null;

// üë§ Auth Check
onAuthStateChanged(auth, (user) => {
  if (user) {
    currentUser = user;
    document.getElementById("userEmail").innerText = user.email;
    loadUserData();
  } else {
    window.location.href = "index.html";
  }
});

// ‚è≥ Timer & Round Handler
function startRoundTimer() {
  const countdown = document.getElementById("timer");
  timer = 25;

  const interval = setInterval(() => {
    timer--;
    countdown.innerText = timer;

    if (timer <= 0) {
      clearInterval(interval);
      determineResult();
    }
  }, 1000);
}

// ü™ô Load User Coins
function loadUserData() {
  get(ref(db, "users/" + currentUser.uid)).then((snapshot) => {
    if (snapshot.exists()) {
      document.getElementById("userCoins").innerText = snapshot.val().coins;
    }
  });
}

// üéØ Color Selection
window.chooseColor = function (color) {
  selectedColor = color;
  alert(`You selected ${color}`);
}

// üîÅ Round Start
function determineResult() {
  const roundRef = ref(db, "rounds/current");

  get(roundRef).then((snapshot) => {
    if (snapshot.exists()) {
      const round = snapshot.val();
      let winningColor = round.winningColor;

      if (!winningColor) {
        const options = ["Red", "Green", "Violet"];
        winningColor = options[Math.floor(Math.random() * 3)];
        set(roundRef, {
          roundId: Date.now(),
          winningColor: winningColor,
          autoGenerated: true
        });
      }

      document.getElementById("winningColor").innerText = winningColor;
      processResult(winningColor);
      setTimeout(startNewRound, 3000);
    } else {
      startNewRound();
    }
  });
}

// üß† Result Processing
function processResult(winningColor) {
  const coinsRef = ref(db, "users/" + currentUser.uid);

  get(coinsRef).then((snapshot) => {
    if (snapshot.exists()) {
      let coins = snapshot.val().coins;
      let win = selectedColor === winningColor;

      if (win) {
        coins += 20;
        alert("üéâ You Won!");
      } else {
        coins -= 10;
        alert("‚ùå You Lost!");
      }

      update(coinsRef, { coins: coins });
      document.getElementById("userCoins").innerText = coins;

      const historyRef = push(ref(db, "history/" + currentUser.uid));
      set(historyRef, {
        time: new Date().toLocaleString(),
        selected: selectedColor,
        result: winningColor,
        win: win
      });
    }
  });
}

// üîÅ New Round Starter
function startNewRound() {
  selectedColor = null;
  document.getElementById("winningColor").innerText = "-";
  startRoundTimer();
}

// üö™ Logout
window.logout = function () {
  signOut(auth).then(() => {
    window.location.href = "index.html";
  });
};

// ‚è±Ô∏è Start Everything
startRoundTimer();
